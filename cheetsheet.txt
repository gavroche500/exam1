1.リポジトリの新規作成

【コマンド】
  git init [リポジトリ名]

【関連情報】
  リモートリポジトリの作成
   GithubのWeb画面からの作業
   [GitHub]のトップ画面から以下のように遷移
   [Repositories]→[New]ボタン をクリックする。
   [Repository name]に作成するリポジトリ名を入力し、[Create repository]をクリックする。

  以下のコマンドが表示されるので、ローカル側で打ち込む
  ――――――――――――――――――――――――――
   Create a new repository on the command line

  touch README.md
  git init
  git add README.md
  git commit -m "first commit"
  git remote add origin https://github.com/gavroche500/exam1.git
  git push -u origin master
  ――――――――――――――――――――――――――

2.既に存在するリポジトリを手元に持ってきたい時
  コマンド：
    $ git clone <リモートリポジトリ> <ローカルリポジトリ>

  説明：
    既に存在するリポジトリをコピー（クローン）するためのコマンド。

    例）$ git clone https://github.com/gavroche500/exam1 /hogehoge/exam1

3. 新しいファイルを管理に加えたい
  コマンド
    $ git add path/to/file
    $ git commit -m "commit comment"
  説明
    新しく追加したいファイルをaddコマンドでインデックスに登録する
    addコマンドで追加されたファイルをcommitコマンドでコミットする

    4で説明している状況と同じコマンドになっていることに注目
    Gitでは、新しいファイルも既存のファイルも、コミットするためにはaddをする必要がある

4.既存のファイルに加わった変更を登録したい
  コマンド
    git add /path/to/file
    git commit -m "COMMIT_MESSAGE"
  説明
    基本形は上記の通りで、addコマンドを実行後にcommitする。
    addコマンドはこの形だとファイルを指定しているが、ディレクトリを指定するとそのディレクトリごとコミット対象にできる。
  その他の情報
    addコマンドにはallやupdateのオプションがあり、これを行っておくとgit rmとかする必要が無かったりするので非常に楽だったりする。

    3で説明している状況と同じコマンドになっていることに注目
    Gitでは、新しいファイルも既存のファイルも、コミットするためにはaddをする必要がある
    ただし、既存のファイルに加わった変更の場合、commitに-aオプションを指定することでaddを省略できる(が、慣れるまではおすすめしない)

5.ファイルを削除した事を登録したい
  コマンド
    $ git rm <file_name>

  説明
    ファイルを作業ディレクトリから削除し、削除した情報をコミットする対象に追加する。

  その他の情報
    バージョン管理してたファイルを普通に消しちゃって、"git rm"を使っていない場合は

      $ git add -A -- <file_name>

    で削除した情報をコミット対象に追加できるよ

6. ファイルを移動した事を登録したい
  コマンド
    $ git mv <oldfilename> <newfilename>
  説明
    ファイルを移動してインデックス登録をする
    指定したファイルを移動し、移動した情報をコミットする対象に追加する。
  その他の情報
    ファイル以外にも、ディレクトリの移動を行う事も可能です。
    実際に移動させずに動作だけ確認するときは -n オプションを付けるとよいみたいです。

7. 緊急の仕事に影響を受けずに作業したい
  緊急の仕事とは別にブランチを作成し、そちらで作業を行う。

  コマンド
    $ git checkout -b <hoge>

  説明
    「git checkout <hoge>」は位置を<hoge>ブランチに切り替えるコマンド。
    -bをつけることによって、新しく<hoge>ブランチを作成し、そこに移動することになる。

  その他情報
    特定のリビジョンからブランチを作成するには、
    $ git checkout -b <hoge> <some-revision>

8, 作業していたら他の人がpushしていた. どうにかしたい
  コマンド
    git fetch remote_name
    git merge remote_name/branch_name
  説明
    remote_nameリポジトリのコミットをローカルへ持ってきて、自分の今いるブランチへremote_nameリポジトリのbranch_nameブランチの変更をマージする。
  その他の情報
    代替コマンド1 - git pull
        git pull remote_name branch_name
      pullコマンドはfetch, (デフォルトでは)mergeをまとめてやってくれる。
      なお、mergeではなくrebaseがしたい場合は--rebaseオプションを付ける。
    代替コマンド2 - git rebase
        git fetch remote_name
        git rebase remote_name/branch_name
      rebaseを利用する場合、mergeコミットを作成するのではなく共通の親からHEADまでのパッチを作成し、それをremote_name/branch_nameへ順々に適用していく。
    コンフリクトした場合
      コンフリクトした場合はいくつか更にパターンがある
        - 自分の変更のみを適用したい
          コマンド
            git checkout --ours /path/to/file
            git add /path/to/file
        - リモートの変更のみを適用したい
          コマンド
            git checkout --thiers /path/to/file
            git add /path/to/file
        - 2つの変更をいい感じにマージしたい1
          コマンド
            (merge, rebaseした時に出てきたコンフリクトしたファイルについて、コンフリクト箇所を手作業で修正)
            git add /path/to/file
        - 2つの変更をいい感じにマージしたい2
          コマンド
            git mergetool
            (マージツールを使っていい感じに手作業でマージする)
            git add /path/to/file

9, 直前のコミットメッセージのtypoに気付いた. 直したい
  コマンド
    git commit --amend
    (エディタが出てくるのでそこでコミットメッセージを編集)
  説明
    より厳密に言うのであれば、
      - 現在コミット対象にされているファイル
      - 直前のコミットで編集されたファイル
    これらを含み「直前のコミットの親を親とするコミット」を作成する。
    なのでgit addされたファイルとかあったりするとそれも含まれる。
  その他の情報
    出てくるエディタは設定可能で、その場合は以下のようにする。
      git config --global core.editor emacs
    このコマンドをそのまま叩きましょう。
    そのままです。そのまま。OK?

11. コミットを見失ってしまった。探したい

コマンド

$ git reflog show <branch_name>

説明

ブランチが作成されてから、現在までの変更履歴を全て表示します。
ブランチでresetやrebaseをした後でも、reset前やrebase前の情報はgit内に残っています。

その他の情報

現在のブランチから辿れないリビジョンの一覧はfsckでも表示できる。

$ git fsck --lost-found

一覧に表示された"commit"オブジェクトを表示していけば、復元したいリビジョンを復元できる。

$ giw show <sha-1>

見つかったら、ブランチを作ってあげれば扱い易くなるよ。

$ git branch restore_branch <sha-1>

13． 現在の状態を確認する
コマンド:
  git status

説明:
リポジトリの状態によって以下のようなメッセージが出力される。

  $ git status
  -------------------------------------------------------------------------------------
  # On branch master
  # Your branch is behind 'origin/master' by 6 commits, and can be fast-forwarded.
  
  #   (use "git pull" to update your local branch)
  #
  nothing to commit, working directory clean
  → コミットするものはありません。作業用のディレクトリはクリーンです。
  
  -------------------------------------------------------------------------------------
  # On branch master
  # Your branch is behind 'origin/master' by 6 commits, and can be fast-forwarded.
  
  #   (use "git pull" to update your local branch)
  #
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       modified:   cheetsheet.txt
  #
  → コミットされるように変更した。「cheetsheet.txt」は更新された。
  
  説明:
  リポジトリの状態によって以下のようなメッセージが出力される。
  
